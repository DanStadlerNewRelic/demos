// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cards_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CardsServiceClient is the client API for CardsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsServiceClient interface {
	ListCards(ctx context.Context, in *CardOwner, opts ...grpc.CallOption) (CardsService_ListCardsClient, error)
	ListMovements(ctx context.Context, in *Card, opts ...grpc.CallOption) (CardsService_ListMovementsClient, error)
}

type cardsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsServiceClient(cc grpc.ClientConnInterface) CardsServiceClient {
	return &cardsServiceClient{cc}
}

func (c *cardsServiceClient) ListCards(ctx context.Context, in *CardOwner, opts ...grpc.CallOption) (CardsService_ListCardsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CardsService_serviceDesc.Streams[0], "/cards_api.CardsService/ListCards", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardsServiceListCardsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardsService_ListCardsClient interface {
	Recv() (*Card, error)
	grpc.ClientStream
}

type cardsServiceListCardsClient struct {
	grpc.ClientStream
}

func (x *cardsServiceListCardsClient) Recv() (*Card, error) {
	m := new(Card)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardsServiceClient) ListMovements(ctx context.Context, in *Card, opts ...grpc.CallOption) (CardsService_ListMovementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CardsService_serviceDesc.Streams[1], "/cards_api.CardsService/ListMovements", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardsServiceListMovementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CardsService_ListMovementsClient interface {
	Recv() (*Movement, error)
	grpc.ClientStream
}

type cardsServiceListMovementsClient struct {
	grpc.ClientStream
}

func (x *cardsServiceListMovementsClient) Recv() (*Movement, error) {
	m := new(Movement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardsServiceServer is the server API for CardsService service.
// All implementations must embed UnimplementedCardsServiceServer
// for forward compatibility
type CardsServiceServer interface {
	ListCards(*CardOwner, CardsService_ListCardsServer) error
	ListMovements(*Card, CardsService_ListMovementsServer) error
	mustEmbedUnimplementedCardsServiceServer()
}

// UnimplementedCardsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardsServiceServer struct {
}

func (UnimplementedCardsServiceServer) ListCards(*CardOwner, CardsService_ListCardsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCards not implemented")
}
func (UnimplementedCardsServiceServer) ListMovements(*Card, CardsService_ListMovementsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMovements not implemented")
}
func (UnimplementedCardsServiceServer) mustEmbedUnimplementedCardsServiceServer() {}

// UnsafeCardsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServiceServer will
// result in compilation errors.
type UnsafeCardsServiceServer interface {
	mustEmbedUnimplementedCardsServiceServer()
}

func RegisterCardsServiceServer(s *grpc.Server, srv CardsServiceServer) {
	s.RegisterService(&_CardsService_serviceDesc, srv)
}

func _CardsService_ListCards_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CardOwner)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardsServiceServer).ListCards(m, &cardsServiceListCardsServer{stream})
}

type CardsService_ListCardsServer interface {
	Send(*Card) error
	grpc.ServerStream
}

type cardsServiceListCardsServer struct {
	grpc.ServerStream
}

func (x *cardsServiceListCardsServer) Send(m *Card) error {
	return x.ServerStream.SendMsg(m)
}

func _CardsService_ListMovements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Card)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CardsServiceServer).ListMovements(m, &cardsServiceListMovementsServer{stream})
}

type CardsService_ListMovementsServer interface {
	Send(*Movement) error
	grpc.ServerStream
}

type cardsServiceListMovementsServer struct {
	grpc.ServerStream
}

func (x *cardsServiceListMovementsServer) Send(m *Movement) error {
	return x.ServerStream.SendMsg(m)
}

var _CardsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cards_api.CardsService",
	HandlerType: (*CardsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCards",
			Handler:       _CardsService_ListCards_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMovements",
			Handler:       _CardsService_ListMovements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cards.proto",
}
