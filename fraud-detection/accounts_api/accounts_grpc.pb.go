// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accounts_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	ListAccounts(ctx context.Context, in *AccountOwner, opts ...grpc.CallOption) (AccountService_ListAccountsClient, error)
	ListMovements(ctx context.Context, in *Account, opts ...grpc.CallOption) (AccountService_ListMovementsClient, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) ListAccounts(ctx context.Context, in *AccountOwner, opts ...grpc.CallOption) (AccountService_ListAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountService_serviceDesc.Streams[0], "/accounts_api.AccountService/ListAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceListAccountsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_ListAccountsClient interface {
	Recv() (*Account, error)
	grpc.ClientStream
}

type accountServiceListAccountsClient struct {
	grpc.ClientStream
}

func (x *accountServiceListAccountsClient) Recv() (*Account, error) {
	m := new(Account)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) ListMovements(ctx context.Context, in *Account, opts ...grpc.CallOption) (AccountService_ListMovementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AccountService_serviceDesc.Streams[1], "/accounts_api.AccountService/ListMovements", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceListMovementsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccountService_ListMovementsClient interface {
	Recv() (*Movement, error)
	grpc.ClientStream
}

type accountServiceListMovementsClient struct {
	grpc.ClientStream
}

func (x *accountServiceListMovementsClient) Recv() (*Movement, error) {
	m := new(Movement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	ListAccounts(*AccountOwner, AccountService_ListAccountsServer) error
	ListMovements(*Account, AccountService_ListMovementsServer) error
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) ListAccounts(*AccountOwner, AccountService_ListAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedAccountServiceServer) ListMovements(*Account, AccountService_ListMovementsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListMovements not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_ListAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountOwner)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).ListAccounts(m, &accountServiceListAccountsServer{stream})
}

type AccountService_ListAccountsServer interface {
	Send(*Account) error
	grpc.ServerStream
}

type accountServiceListAccountsServer struct {
	grpc.ServerStream
}

func (x *accountServiceListAccountsServer) Send(m *Account) error {
	return x.ServerStream.SendMsg(m)
}

func _AccountService_ListMovements_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Account)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountServiceServer).ListMovements(m, &accountServiceListMovementsServer{stream})
}

type AccountService_ListMovementsServer interface {
	Send(*Movement) error
	grpc.ServerStream
}

type accountServiceListMovementsServer struct {
	grpc.ServerStream
}

func (x *accountServiceListMovementsServer) Send(m *Movement) error {
	return x.ServerStream.SendMsg(m)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "accounts_api.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccounts",
			Handler:       _AccountService_ListAccounts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListMovements",
			Handler:       _AccountService_ListMovements_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "accounts.proto",
}
