// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package claims_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClaimsServiceClient is the client API for ClaimsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClaimsServiceClient interface {
	ListClaims(ctx context.Context, in *Policy, opts ...grpc.CallOption) (ClaimsService_ListClaimsClient, error)
}

type claimsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClaimsServiceClient(cc grpc.ClientConnInterface) ClaimsServiceClient {
	return &claimsServiceClient{cc}
}

func (c *claimsServiceClient) ListClaims(ctx context.Context, in *Policy, opts ...grpc.CallOption) (ClaimsService_ListClaimsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClaimsService_serviceDesc.Streams[0], "/claims_api.ClaimsService/ListClaims", opts...)
	if err != nil {
		return nil, err
	}
	x := &claimsServiceListClaimsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClaimsService_ListClaimsClient interface {
	Recv() (*Claim, error)
	grpc.ClientStream
}

type claimsServiceListClaimsClient struct {
	grpc.ClientStream
}

func (x *claimsServiceListClaimsClient) Recv() (*Claim, error) {
	m := new(Claim)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClaimsServiceServer is the server API for ClaimsService service.
// All implementations must embed UnimplementedClaimsServiceServer
// for forward compatibility
type ClaimsServiceServer interface {
	ListClaims(*Policy, ClaimsService_ListClaimsServer) error
	mustEmbedUnimplementedClaimsServiceServer()
}

// UnimplementedClaimsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClaimsServiceServer struct {
}

func (UnimplementedClaimsServiceServer) ListClaims(*Policy, ClaimsService_ListClaimsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClaims not implemented")
}
func (UnimplementedClaimsServiceServer) mustEmbedUnimplementedClaimsServiceServer() {}

// UnsafeClaimsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClaimsServiceServer will
// result in compilation errors.
type UnsafeClaimsServiceServer interface {
	mustEmbedUnimplementedClaimsServiceServer()
}

func RegisterClaimsServiceServer(s *grpc.Server, srv ClaimsServiceServer) {
	s.RegisterService(&_ClaimsService_serviceDesc, srv)
}

func _ClaimsService_ListClaims_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Policy)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClaimsServiceServer).ListClaims(m, &claimsServiceListClaimsServer{stream})
}

type ClaimsService_ListClaimsServer interface {
	Send(*Claim) error
	grpc.ServerStream
}

type claimsServiceListClaimsServer struct {
	grpc.ServerStream
}

func (x *claimsServiceListClaimsServer) Send(m *Claim) error {
	return x.ServerStream.SendMsg(m)
}

var _ClaimsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "claims_api.ClaimsService",
	HandlerType: (*ClaimsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListClaims",
			Handler:       _ClaimsService_ListClaims_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "claims.proto",
}
