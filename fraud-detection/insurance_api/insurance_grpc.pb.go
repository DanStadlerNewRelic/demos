// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package insurance_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InsuranceServiceClient is the client API for InsuranceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InsuranceServiceClient interface {
	FraudReport(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*InsuranceReport, error)
}

type insuranceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInsuranceServiceClient(cc grpc.ClientConnInterface) InsuranceServiceClient {
	return &insuranceServiceClient{cc}
}

func (c *insuranceServiceClient) FraudReport(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*InsuranceReport, error) {
	out := new(InsuranceReport)
	err := c.cc.Invoke(ctx, "/insurance_api.InsuranceService/FraudReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InsuranceServiceServer is the server API for InsuranceService service.
// All implementations must embed UnimplementedInsuranceServiceServer
// for forward compatibility
type InsuranceServiceServer interface {
	FraudReport(context.Context, *Customer) (*InsuranceReport, error)
	mustEmbedUnimplementedInsuranceServiceServer()
}

// UnimplementedInsuranceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInsuranceServiceServer struct {
}

func (UnimplementedInsuranceServiceServer) FraudReport(context.Context, *Customer) (*InsuranceReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FraudReport not implemented")
}
func (UnimplementedInsuranceServiceServer) mustEmbedUnimplementedInsuranceServiceServer() {}

// UnsafeInsuranceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InsuranceServiceServer will
// result in compilation errors.
type UnsafeInsuranceServiceServer interface {
	mustEmbedUnimplementedInsuranceServiceServer()
}

func RegisterInsuranceServiceServer(s *grpc.Server, srv InsuranceServiceServer) {
	s.RegisterService(&_InsuranceService_serviceDesc, srv)
}

func _InsuranceService_FraudReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InsuranceServiceServer).FraudReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/insurance_api.InsuranceService/FraudReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InsuranceServiceServer).FraudReport(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

var _InsuranceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "insurance_api.InsuranceService",
	HandlerType: (*InsuranceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FraudReport",
			Handler:    _InsuranceService_FraudReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "insurance.proto",
}
